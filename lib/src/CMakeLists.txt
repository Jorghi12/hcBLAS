CMAKE_MINIMUM_REQUIRED (VERSION 2.8.8) 
MESSAGE(STATUS "CMAKE VERSION ${CMAKE_VERSION}")

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

#Setting a Project name
SET(PROJECT_NAME "hcblas")
SET(PROJECT_NAME_EXT "hipblas")
SET(ROCM_PATH "/opt/rocm/")

PROJECT (${PROJECT_NAME})
MESSAGE(STATUS "PROJECT NAME : ${PROJECT_NAME}")

SET(HIP_SUPPORT $ENV{HIP_SUPPORT})

# Find HIP
set (HIP_PATH $ENV{HIP_PATH})
if (NOT DEFINED HIP_PATH)
       set (HIP_PATH ${ROCM_PATH}/hip)
endif()

execute_process(COMMAND ${HIP_PATH}/bin/hipconfig --platform OUTPUT_VARIABLE HIP_PLATFORM)
MESSAGE (STATUS "HIP_PATH : ${HIP_PATH}")

# Build hcfft and hipfft from source on AMD platform
IF (${HIP_PLATFORM} MATCHES "hcc")
  # Find HCC compiler
  FIND_PACKAGE(HC++ 1.0 REQUIRED)

  ADD_SUBDIRECTORY(blas)


  #Setting a variable for source files
  SET (HCBLASSRCS ${BLASSRC} hcblas.cpp)

  execute_process(COMMAND ${HCC_CONFIG} --install --cxxflags
                            OUTPUT_VARIABLE HCC_CXXFLAGS)
  execute_process(COMMAND ${HCC_CONFIG} --install --ldflags --shared
                            OUTPUT_VARIABLE HCC_LDFLAGS)
 
  string(STRIP "${HCC_CXXFLAGS}" HCC_CXXFLAGS)
  string(STRIP "${HCC_LDFLAGS}" HCC_LDFLAGS)
  
  set (HCC_CXXFLAGS "${HCC_CXXFLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}/../ -I${ROCM_PATH}/include")
  set (HCC_LDFLAGS "${HCC_LDFLAGS} -amdgpu-target=gfx803 -amdgpu-target=gfx900")

  IF (${HIP_SUPPORT} MATCHES "on") 
    set (HCC_CXXFLAGS "${HCC_CXXFLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}/../ -I${ROCM_PATH}/include -I${HIP_PATH}/include")
    set (HCC_LDFLAGS "${HCC_LDFLAGS} -L${HIP_PATH}/lib -lhip_hcc -Wl,-rpath-link,${HIP_PATH}/lib")
  ENDIF()
 
  # Setting header dependencies for hcblas library generation
  FOREACH(src_file ${HCBLASSRCS})
	  SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${HCC_CXXFLAGS} ")
  ENDFOREACH()

  #Generating hcblas shared object
  ADD_LIBRARY("${PROJECT_NAME}" SHARED  ${HCBLASSRCS})
  SET_PROPERTY(TARGET "${PROJECT_NAME}" APPEND_STRING PROPERTY LINK_FLAGS " ${HCC_LDFLAGS} ")
  TARGET_LINK_LIBRARIES("${PROJECT_NAME}" hc_am)


  INSTALL(TARGETS "${PROJECT_NAME}" 
    RUNTIME DESTINATION lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
  )

  INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include PATTERN "*.h.in" EXCLUDE)
  
  IF (${HIP_SUPPORT} MATCHES "on")
    SET (HIPBLASSRCS ${HCBLASSRCS} ${CMAKE_CURRENT_SOURCE_DIR}/hcc_detail/hipblas.cpp)
 
    
    # Setting header dependencies for hipblas library generation
    FOREACH(src_file ${HIPBLASSRCS})
          SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${HCC_CXXFLAGS} ")
    ENDFOREACH()
    
    #Generating hipblas shared object
    ADD_LIBRARY("${PROJECT_NAME_EXT}" SHARED ${HIPBLASSRCS})
    SET_PROPERTY(TARGET "${PROJECT_NAME_EXT}" APPEND_STRING PROPERTY LINK_FLAGS " ${HCC_LDFLAGS} ")
    TARGET_LINK_LIBRARIES("${PROJECT_NAME_EXT}" hc_am)

    INSTALL(TARGETS "${PROJECT_NAME_EXT}" 
        RUNTIME DESTINATION lib
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
    )
  
    INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include PATTERN "*.h.in" EXCLUDE)  
  ENDIF()

ELSEIF (${HIP_PLATFORM} MATCHES "nvcc")
  
  MESSAGE(STATUS "Building hipblas.cpp")
  
  SET (CXXFLAGS "-I${CMAKE_CURRENT_SOURCE_DIR}/../ -I${HIP_PATH}/include -I/usr/local/cuda/include -D__HIP_PLATFORM_NVCC__=")
  SET (LDFLAGS "-L/usr/local/cuda/lib64 -L/usr/local/cuda/lib")
  SET (HIPBLASSRCS ${CMAKE_CURRENT_SOURCE_DIR}/nvcc_detail/hipblas.cpp)
  
  FOREACH(src_file ${HIPBLASSRCS})
	  SET_PROPERTY(SOURCE ${src_file} APPEND_STRING PROPERTY COMPILE_FLAGS " ${CXXFLAGS} ")
  ENDFOREACH()

  ADD_LIBRARY("${PROJECT_NAME_EXT}" SHARED ${HIPBLASSRCS})
  SET_PROPERTY(TARGET "${PROJECT_NAME_EXT}" APPEND_STRING PROPERTY LINK_FLAGS " ${LDFLAGS} ")
  TARGET_LINK_LIBRARIES("${PROJECT_NAME_EXT}" cudart cublas)
  
  INSTALL(TARGETS "${PROJECT_NAME_EXT}" 
    RUNTIME DESTINATION lib
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    PERMISSIONS WORLD_READ WORLD_WRITE WORLD_EXECUTE
  )

  INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../include/" DESTINATION include PATTERN "*.h.in" EXCLUDE) 
 
ENDIF()

